-----------------------------------------> 7. Variáveis Compostas

Um array pode ser definido da seguinte maneira:

$variavel = array(
	"nome" => "Luke",
	"sobrenome" => "Muniz",
	"idade" => 25
	);

Onde o primeiro item em aspas é a $key e o segundo é o $value, isto serve para fazerem verificações de campo como: 

if($variavel['nome'] == "Lucas"){
	return true;
}

Se em um array não for definido o campo chave para os elementos, o php automaticamente assigna 0,1,2,3... e etc para cada campo automaticamente.
É possivel manipular arrays desta maneira $variável['nome] = "outro nome", indicando o campo do array que eu quero alterar. Quando ele não acha uma chave ele define com o primeiro número, o que ele achar. 

ex: 
$variavel = array(
	"nome" => "Luke",
	"sobrenome" => "Muniz", 25
	);

print_r($variavel) -- que produz: Array ( [nome] => Lucas [0] => Muniz )

-> é possível ter um array dentro de um array, onde:

$variável = array(
	0 => array(
		"nome" => "",
		"quantidade" => "",
		"infor" => ""
	),

	1 => array(
		"nome" => "",
		"quantidade" => "",
		"infor" => ""
	),
);

-> E é possivel adicionar mais entradas fazendo:

 $variável[] = array(
		"nome" => "",
		"quantidade" => "",
		"infor" => ""
		);

-> É possível também adicionar qualquer tipo de entrada no array, uma string um inteiro etc.

-----------------------------------------> 8. Variáveis Globais

-> Variáveis globais são do próprio PHP.
A variável $_SERVER é um array que contém informações do servidor.

-> A variável global $_GET[""], passa as informações por fora da requisição, na URL, o $_POST[""] passa as informações dentro da requisição, tal como nome de usuário, senha e etc. No browser, quando eu coloco o ponto de interrogação quer dizer que eu estou começando a digitar variáveis, ex: ?nome=Lucas. quando eu quero enviar mais de um, eu utilizo o &, exemplo: ?nome=Lucas&surnames=Muniz

----------------------------------------->  9. Constantes

Para se definir uma constante, usamos o define():

define("URL", "https://glori4n.com);

e podemos acessá-la assim:

echo "minha site é: ". URL;

Sem o $ pois em constantes não é necessário o uso do mesmo. Em comparação as constantes TRUE e FALSE são do próprio PHP.

-----------------------------------------> 10. Formas de usar variáveis

-> Quando se utiliza aspas simples ' o PHP interpreta o que tem dentro como um texto exato, exemplo:

$nome = Lucas;
echo 'Meu nome é $nome.';
OUTPUT-> Meu nome é $nome.

-> Se eu usar aspas duplas:

$nome = Lucas;
echo "Meu nome é $nome.";
OUTPUT-> Meu nome é Lucas.

-----------------------------------------> 12. Receber dados de um formulário

-> É possível acessar os dados de um $_POST da mesma maneira que no array, onde $_POST['email'] a fim de fazermos verificações e etc.

no vídeo ele usou o empty() == false pois a função verifica se tem algo e retorna true ou false, se houver um campo mesmo que não preenchido ele irá retornar true, por isso nesse caso ele usou o operador == a fim de verificar se essa variável estava vazia e se estivesse só iria levar em conta se retornasse um false. if(isset($_POST['email']) && empty($_POST['email']) == false), isso quer dizer que eu não quero que este campo esteja vazio.

-----------------------------------------> 13. SWITCH

-> O switch case funciona assim:

  {
        case null:
            echo "X is currently empty.";
        break;

        case $x == 1:
            echo "X is currently 1.";
        break;

        case $x >= 1:
            echo "X is larger than 1.";
        break;

        default:
        echo "X's value is: ".$x;
        break;
    }

onde o default define o que fazer caso nenhum dos cases sejam true, é possível também fazer varios cases juntos seguidos do código e depois o break, de maneira a fazer varias validações.

-----------------------------------------> 14. Usando múltiplos arquivos PHP

-> Com o require é possível chamar arquivos onde se houver qualquer tipo de erro dentro do mesmo ele para de processar, com o include, mesmo com erros ele continua processando, com o método require_once é possível importar o arquivo somente uma vez, evitando correr o código multiplas vezes.

<?php 
require "passologico.php";
?>

Com isto ele irá ir dentro deste arquivo e executar quaisquer passos e se retornar algum erro ele para de processar.